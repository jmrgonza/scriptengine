#!/usr/bin/env python3

"""ScriptEngine command line interface (cli).

The se command provides a command line interface to ScriptEngine, allowing for
the creation of scripts from YAML files and runnig the scripts via the
SimpleScriptEngine.
"""

import logging
import argparse

import se.scripts.logging

from se.jobs import Job, from_yaml_file
from se.scripts import SimpleScriptEngine

def parse_command_line_arguments():

    arg_parser = argparse.ArgumentParser(description='ScriptEngine command line tool')

    arg_parser.add_argument('-q', '--quiet', help='be quiet, no extra output', action='store_true')
    arg_parser.add_argument('--debug', help='lots of extra debug output', action='store_true')
    arg_parser.add_argument('file', help='YAML file(s) to read', nargs='+')

    args = arg_parser.parse_args()

    return {'files': args.file,
            'quiet': args.quiet,
            'debug': args.debug}


if __name__ == '__main__':

    cfg = parse_command_line_arguments()

    if cfg['quiet']:
        LOG = se.scripts.logging.app_logger('se', level=logging.WARN)
    elif cfg['debug']:
        LOG = se.scripts.logging.app_logger('se', level=logging.DEBUG)
    else:
        LOG = se.scripts.logging.app_logger('se', level=logging.INFO)

    LOG.debug("Start processing files")
    if len(cfg['files'])==1:
        job = se.jobs.parse.from_yaml_file(cfg['files'][0])
    else:
        job = Job()
        for file in cfg['files']:
            job.append(se.jobs.parse.from_yaml_file(file))
    LOG.debug("Finish processing files")

    LOG.debug('Start running jobs')
    script_engine = SimpleScriptEngine()
    context = {"_se_instance": script_engine}
    script_engine.run(job, context)
    LOG.debug('Finish running jobs')
