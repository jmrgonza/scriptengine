#!/usr/bin/env python3

"""ScriptEngine command line interface (cli).

The se command provides a command line interface to ScriptEngine, allowing for
the creation of scripts from YAML files and runnig the scripts via the
SimpleScriptEngine.
"""

import logging
import argparse
import yaml

import se.scripts.logging

from se.jobs import Job
from se.tasks import Configuration, Echo, Copy, Command, Template, Getenv
from se.scripts import SimpleScriptEngine

def parse_command_line_arguments():

    arg_parser = argparse.ArgumentParser(description='ScriptEngine command line tool')

    arg_parser.add_argument('--dry-run', help='Don\'t actually run any commands',
                            action='store_true')
    arg_parser.add_argument('-q', '--quiet', help='Be quiet', action='store_true')
    arg_parser.add_argument('--debug', help='Debug output', action='store_true')
    arg_parser.add_argument('file', help='YAML files to read', nargs='+')

    args = arg_parser.parse_args()

    return {'files': args.file,
            'quiet': args.quiet,
            'debug': args.debug,
            'dryrun': args.dry_run}

def create_job_from_dict(dictionary):

    all_task_classes = {'echo': Echo,
                        'copy': Copy,
                        'command': Command,
                        'template': Template,
                        'config': Configuration,
                        'getenv': Getenv}

    all_simple_jobs = set(all_task_classes.keys())
    all_composite_jobs = {'do'}
    all_job_modifiers = {'when', 'loop', 'context'}

    job_name = set(dictionary.keys()) & (all_composite_jobs | all_simple_jobs)
    if len(job_name) != 1:
        LOG.error('Missing, unknown or ambiguous job or task name: %s', job_name)
        raise RuntimeError('Missing, unknown or ambiguous job/task name')

    job_name = job_name.pop()
    job_modifiers = set(dictionary.keys()) & all_job_modifiers

    if {job_name} | job_modifiers != dictionary.keys():
        LOG.error('Unknown keyword(s) in job specification: %s',
                  dictionary.keys() - ({job_name} | job_modifiers))
        raise RuntimeError('Unknown keyword(s) in job specification')

    LOG.debug('Create job "%s"', job_name)
    job = Job()

    if job_name in all_composite_jobs:
        LOG.debug('Job is composite')
        sub_job = Job(tasks=None,
                      when=dictionary.get('when', None),
                      loop=dictionary.get('loop', None),
                      context=dictionary.get('context', None))
        for j in dictionary[job_name]:
            sub_job.append(create_job_from_dict(j))
        job.append(sub_job)
        LOG.debug('Finish creating composite job')

    elif job_name in all_simple_jobs:

        LOG.debug('Create task')
        task = all_task_classes[job_name](dictionary[job_name])
        if job_modifiers:
            LOG.debug('Add task with job modifiers %s', job_modifiers)
            job.append(Job(tasks=task,
                           when=dictionary.get('when', None),
                           loop=dictionary.get('loop', None),
                           context=dictionary.get('context', None)))
        else:
            LOG.debug('Add as simple task')
            job.append(task)
    return job


if __name__ == '__main__':

    cfg = parse_command_line_arguments()

    if cfg['quiet']:
        LOG = se.scripts.logging.app_logger('se', level=logging.WARN)
    elif cfg['debug']:
        LOG = se.scripts.logging.app_logger('se', level=logging.DEBUG)
    else:
        LOG = se.scripts.logging.app_logger('se', level=logging.INFO)

    if cfg['dryrun']:
        LOG.info('Running in dry-run mode')

    LOG.debug('Start processing files')
    script = []
    for file in cfg['files']:
        LOG.info(f'Processing file {file}')
        with open(file) as f:
            scr = yaml.safe_load(f)
        if isinstance(scr, list):
            script.extend(scr)
        elif isinstance(scr, dict):
            script.append(scr)
        else:
            LOG.error('YAML parser returns unknown data type from file %s', file)
            raise RuntimeError(f'YAML parser returns unknown data type from file {file}')
    LOG.debug('Finish processing files')

    LOG.debug('Start creating job list')
    joblist = []
    for job in script:
        LOG.debug('Create job from %s', job)
        joblist.append(create_job_from_dict(job))
    LOG.debug('Finish creating job list')

    LOG.debug('Start running jobs')
    SimpleScriptEngine().run(script=joblist, dryrun=cfg['dryrun'])
    LOG.debug('Finish running jobs')
