#!/usr/bin/env python3

import logging
import argparse
import yaml

from se.jobs import Job
from se.tasks import Configuration, Echo, Copy, Command, Template, Getenv
from se.scripts import SimpleScriptEngine

DRY_RUN = False

def parse_command_line_arguments():
    arg_parser = argparse.ArgumentParser(description='ScriptEngine command line tool')

    arg_parser.add_argument('--dry-run', help='Don\'t actually run any commands', action='store_true')
    arg_parser.add_argument('-v', '--verbose', help='Be verbose', action='store_true')
    arg_parser.add_argument('--debug', help='Debug output', action='store_true')
    arg_parser.add_argument('file', help='YAML files to read', nargs='+')

    args = arg_parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.dry_run:
        global DRY_RUN
        DRY_RUN = True

    return args.file

def create_job_from_dict(dictionary):

    TASK_CLASSES = { 'echo': Echo,
                     'copy': Copy,
                     'command': Command,
                     'template': Template,
                     'config': Configuration,
                     'getenv': Getenv }
    SIMPLE_JOB = set(TASK_CLASSES.keys())
    COMPOSITE_JOB = { 'do' }
    JOB_MODIFIERS = { 'when', 'loop', 'context' }

    job_name = set(dictionary.keys()) & (COMPOSITE_JOB | SIMPLE_JOB)
    if len(job_name) != 1:
        raise RuntimeError('Missing, unknown or ambiguous job/task name')
    else:
        job_name = job_name.pop()

    job_modifiers = set(dictionary.keys()) & JOB_MODIFIERS

    if {job_name} | job_modifiers != set(dictionary.keys()):
        raise RuntimeError('Unknown keywords in job description')

    logging.debug('Creating "{}" job'.format(job_name))

    job = Job()

    if job_name in COMPOSITE_JOB:
        logging.debug('This is a composite job')
        sub_job = Job(tasks=None,
                      when=dictionary.get('when', None),
                      loop=dictionary.get('loop', None),
                      context=dictionary.get('context', None))
        for j in dictionary[job_name]:
            sub_job.append(create_job_from_dict(j))
        job.append(sub_job)

    elif job_name in SIMPLE_JOB:

        task = TASK_CLASSES[job_name](dictionary[job_name])
        if job_modifiers:
            logging.debug('This is a task with job modifiers')
            job.append(Job(tasks=task,
                           when=dictionary.get('when', None),
                           loop=dictionary.get('loop', None),
                           context=dictionary.get('context', None)))
        else:
            logging.debug('This is a simple task')
            job.append(task)
    return job


if __name__ == '__main__':

    files = parse_command_line_arguments()

    if DRY_RUN:
        logging.info('Running in dry-run mode')

    script = []
    for file in files:
        logging.info('--> Processing file {}'.format(file))
        with open(file) as f:
            scr = yaml.safe_load(f)
        script.extend(scr)

    job = Job()
    for j in script:
        job.append(create_job_from_dict(j))

    SimpleScriptEngine().run(script=[job], dryrun=DRY_RUN)
