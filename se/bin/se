#!/usr/bin/env python3

import logging
import argparse
from yaml import safe_load

from se.jobs import Job
from se.tasks import Echo, Copy, Command, Template
from se.scripts import SimpleScriptEngine

DRY_RUN = False

def parse_command_line_arguments():
    arg_parser = argparse.ArgumentParser(description='ScriptEngine command line tool')

    arg_parser.add_argument('--dry-run', help='Don\'t actually run any commands', action='store_true')
    arg_parser.add_argument('-v', '--verbose', help='Be verbose', action='store_true')
    arg_parser.add_argument('--debug', help='Debug output', action='store_true')
    arg_parser.add_argument('file', help='YAML files to read', nargs='+')

    args = arg_parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.dry_run:
        global DRY_RUN
        DRY_RUN = True

    return args.file

def read_se_yaml(file):
    yaml = safe_load(file)
    return yaml['configuration'], yaml['jobs']

def create_job_from_dict(dictionary):

    COMPOSITE_JOB = { 'do' }
    SIMPLE_JOB_OR_TASK = { 'echo', 'copy', 'command', 'template' }
    JOB_MODIFIER = { 'when', 'loop', 'context' }

    job = Job()

    keys = set(dictionary.keys())

    if len(keys & (COMPOSITE_JOB | SIMPLE_JOB_OR_TASK))>1:
      raise RuntimeError('boo!')

    job_name = (keys & (COMPOSITE_JOB | SIMPLE_JOB_OR_TASK)).pop()
    logging.debug('Creating "%s" job' % job_name)

    if job_name in COMPOSITE_JOB:
        logging.debug('This is a composite job')
        sub_job = Job()
        for j in dictionary[job_name]:
            sub_job.append(create_job_from_dict(j))
        sub_job.when = dictionary.get('when', None)
        sub_job.loop = dictionary.get('loop', None)
        sub_job.context = dictionary.get('context', None)
        job.append(sub_job)

    elif job_name in SIMPLE_JOB_OR_TASK:

        if keys & JOB_MODIFIER:
            logging.debug('This is a task with job modifiers')
            sub_job = Job()
            if job_name == 'echo':
                task = Echo(dictionary[job_name])
            elif job_name == 'copy':
                task = Copy(dictionary[job_name])
            elif job_name == 'command':
                task = Command(dictionary[job_name])
            sub_job.append(task)
            sub_job.when = dictionary.get('when', None)
            sub_job.loop = dictionary.get('loop', None)
            sub_job.context = dictionary.get('context', None)
            job.append(sub_job)

        else:
            logging.debug('This is a simple task')
            if job_name == 'echo':
                task = Echo(dictionary[job_name])
            elif job_name == 'copy':
                task = Copy(dictionary[job_name])
            elif job_name == 'command':
                task = Command(dictionary[job_name])
            elif job_name == 'template':
                task = Template(dictionary[job_name])
            else:
                raise RuntimeError('Unknown task: {}'.format(job_name))
            job.append(task)

    return job


if __name__ == '__main__':

    files = parse_command_line_arguments()

    if DRY_RUN:
        logging.info('Running in dry-run mode')

    config = {}
    script = []

    for file in files:
        logging.info('--> Processing file {}'.format(file))
        with open(file) as f:
            cfg, scr = read_se_yaml(f)
        config.update(cfg)
        script.extend(scr)

    job = Job()
    for j in script:
        job.append(create_job_from_dict(j))

    SimpleScriptEngine().run(jobs=[job], **config, dryrun=DRY_RUN)
